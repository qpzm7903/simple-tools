name: Build and Release Windows Executable

on:
  push:
    tags:
      - "v*"  # 当推送以 'v' 开头的标签时触发（如 v1.0.0）

# 添加明确的权限声明
permissions:
  contents: write  # 允许工作流创建 releases
  packages: read
  actions: read

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"  # 使用3.10确保更好的兼容性

      - name: Debug - List directory structure
        shell: pwsh
        run: |
          Write-Output "Current directory: $PWD"
          Write-Output "Directory listing:"
          Get-ChildItem -Recurse -Depth 1
          Write-Output "-----------------------------"
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Create required directories if missing
        shell: pwsh
        run: |
          # 确保所有需要的目录都存在
          $dirs = @("web/templates", "web/static", "examples", "core", "utils")
          foreach ($dir in $dirs) {
            if (-not (Test-Path -Path $dir)) {
              Write-Output "Creating missing directory: $dir"
              New-Item -Path $dir -ItemType Directory -Force
            } else {
              Write-Output "Directory exists: $dir"
            }
          }

      - name: Copy final entry file
        run: |
          if (Test-Path -Path "temp_build\mybatis_entry_final.py") {
            Copy-Item -Path "temp_build\mybatis_entry_final.py" -Destination "mybatis_entry_final.py"
            Write-Output "Copied final entry file"
          } else {
            Write-Output "Using existing mybatis_entry_final.py"
          }

      - name: Edit spec file
        shell: pwsh
        run: |
          if (Test-Path -Path "mybatis_sql_analyzer.spec") {
            $content = Get-Content "mybatis_sql_analyzer.spec" -Raw
            # 只包含真正存在的目录
            $dirs = @()
            foreach ($dir in @("web/templates", "web/static", "examples", "core", "utils")) {
              if (Test-Path -Path $dir) {
                $dirs += "('$dir', '$dir')"
              }
            }
            # 添加环境文件
            if (Test-Path -Path ".env.example") {
              $dirs += "('.env.example', '.')"
            }
            
            $dirsString = "[" + ($dirs -join ", ") + "]"
            $content = $content -replace "datas=\[\('[^']+', '[^']+'\)(, \('[^']+', '[^']+'\))*\]", "datas=$dirsString"
            
            # 保存修改后的内容
            Set-Content -Path "mybatis_sql_analyzer.spec" -Value $content
            Write-Output "Updated spec file with existing directories"
            Get-Content "mybatis_sql_analyzer.spec" | Select-String "datas="
          }

      - name: Build executable using spec file
        run: |
          if (Test-Path -Path "mybatis_sql_analyzer.spec") {
            pyinstaller mybatis_sql_analyzer.spec
            Write-Output "Built using spec file"
          } else {
            Write-Output "Spec file not found, using build script"
            python build_executable.py
          }

      - name: Check build result
        shell: pwsh
        run: |
          if (Test-Path -Path "dist\mybatis_sql_analyzer.exe") {
            Write-Output "Build successful: executable found"
          } else {
            Write-Output "Build failed: executable not found"
            exit 1
          }

      - name: Copy README to dist directory
        shell: pwsh
        run: |
          if (Test-Path -Path "README.md") {
            Copy-Item -Path "README.md" -Destination "dist\README.md"
            Write-Output "Copied README.md to dist directory"
          } else {
            Write-Output "README.md not found in project root"
          }

      - name: Create zip archive
        run: |
          Compress-Archive -Path dist\* -DestinationPath mybatis_sql_analyzer_windows.zip
          Write-Output "Created zip archive"

      - name: Upload executable artifact
        uses: actions/upload-artifact@v4
        with:
          name: mybatis_sql_analyzer-windows
          path: dist/mybatis_sql_analyzer.exe
          if-no-files-found: error

      - name: Upload zip archive artifact
        uses: actions/upload-artifact@v4
        with:
          name: mybatis_sql_analyzer-zip
          path: mybatis_sql_analyzer_windows.zip
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    # 确保在这一步也有必要的权限
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: "MyBatis SQL Analyzer ${{ github.ref_name }}"
          body: |
            # MyBatis SQL Analyzer ${{ github.ref_name }}
            
            Windows版本可执行文件
            
            ## 安装说明
            
            1. 下载 `.exe` 文件或 `.zip` 文件
            2. 直接运行 `.exe` 文件即可使用
            
            详细使用说明请参阅压缩包中的 README.md
          files: |
            artifacts/mybatis_sql_analyzer-windows/*
            artifacts/mybatis_sql_analyzer-zip/*
          # 直接从GitHub提供的令牌获取必要权限
          token: ${{ github.token }}